
name: test-and-coverage
on: pull_request
jobs:
  # job for test on ubunutu only
  tests-and-coverage-ubuntu-16-04-R-3-6:
    runs-on: ubuntu-16.04
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      # to install binaries on ubuntu
      RSPM: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: 3.6
      - name: Install system dependencies
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "install.packages(c('remotes', 'rcmdcheck'))"
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo -s eval "$sysreqs"
      - name: Install package dependencies
        # RcppGSL and stringi can currently not load or link when installed from RSPM,
        #   therefore install from cran (source)
        run: |
          remotes::install_deps(dependencies = TRUE)
          print(getOption("repos"))
          remotes::install_cran("testthat", repos = "https://cran.rstudio.com/")
          remotes::install_cran("devtools", repos = "https://cran.rstudio.com/")
          remotes::install_cran("covr", repos = "https://cran.rstudio.com/")
        shell: Rscript {0}

      - name: Run tests
        run: |
          library(testthat)
          library(devtools)
          devtools::test(reporter=RstudioReporter)
        shell: Rscript {0}

      - name: Test coverage, if tests succeeded
        if: success()
        # run: covr::codecov()
        run: covr::package_coverage(type = "tests", quiet = FALSE)
        shell: Rscript {0}


name: R-CMD-check
on: [push, pull_request]
jobs:
  # job for R CMD checks on win, mac, ubuntu
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: R-CMD-check-${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '3.6.2'}
          - {os: macOS-latest,   r: '3.6.2'}
          - {os: ubuntu-16.04,   r: '3.6.2', rspm: "https://demo.rstudiopm.com/all/__linux__/xenial/latest"}
    env:
        R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
        RSPM: ${{ matrix.config.rspm }}

    steps:
        - uses: actions/checkout@v2

        - uses: r-lib/actions/setup-r@master
          with:
            r-version: ${{ matrix.config.r }}
            rtools-version: '40'

        - name: Query dependencies
          run: |
            install.packages('remotes')
            saveRDS(remotes::dev_package_deps(dependencies = TRUE), "depends.Rds", version = 2)
          shell: Rscript {0}

        - name: Cache R packages
          if: runner.os != 'Windows'
          uses: actions/cache@v1
          with:
            path: ${{ env.R_LIBS_USER }}
            key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('depends.Rds') }}
            restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-

        - name: Install system dependencies
          if: runner.os == 'Linux'
          env:
            RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
          run: |
            Rscript -e "remotes::install_github('r-hub/sysreqs')"
            sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
            sudo -s eval "$sysreqs"
            sudo apt-get install -y qpdf

        - name: Install gsl for mac
          if: runner.os == 'macOS'
          run: |
            brew install gsl

        - name: Install dependencies
          run: |
            remotes::install_deps(dependencies = TRUE)
            remotes::install_cran("rcmdcheck")
            # install from source for ubuntu, binary does not work
            remotes::install_cran("RcppGSL", repos = "https://cran.rstudio.com/")
            print(RcppGSL::LdFlags())
            print(RcppGSL::CFlags())
            if(file.exists('depends.Rds')) {file.remove('depends.Rds')}
            # check if can build a rcppgsl package from source
            install.packages("flan", type="source", repos="https://cran.rstudio.com/")
            library(flan)
          shell: Rscript {0}

        - name: Check
          run: rcmdcheck::rcmdcheck(args = c("--no-tests", "--as-cran", "--no-manual"), error_on = "warning", check_dir = "check")
          shell: Rscript {0}

